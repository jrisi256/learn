* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

p {
    padding-bottom: 20px;
}

ol {
    padding-left: 30px;
    padding-bottom: 20px;
}

.menu-container {
    color: #fff;
    background-color: #5995DA;
    padding: 20px 0;
    display: flex; /* Everything in the this box should be rendered as a flexbox rather than default box model. */
    justify-content: center; /* Defines horizontal alignment of its children or items. Same as if we added maring: 0 auto to our .menu element. */
}

.menu {
    border: 1px solid #fff;
    width: 900px;
    display: flex;
    justify-content: space-between; /* Allows us to distribute all elements evenly */
}

.links {
    border: 1px solid #fff;
    display: flex;
    justify-content: flex-end;
}

.login {
    margin-left: 20px;
}

.header-container {
    color: #5995DA;
    background-color: #D6E9FE;
    display: flex;
    justify-content: center;
}

.header {
    width: 900px;
    height: 300px; /* Once an explicit height is set, items can be positioned vertically or cross-axis */
    display:flex;
    justify-content: space-between;
    align-items: center; /* Aligns things vertically centered */
    /* align-items: stretch */ /* fun to play around with. See how it changes the border. */
}

.social,
.logo,
.subscribe {
    border: 1px solid #5995DA;
}

.photo-grid-container {
    display: flex;
    justify-content: center;
}

.photo-grid {
    width: 900px;
    display: flex;
    justify-content: center;
    flex-wrap: wrap; /* when the elements don't fix in their container, force them to wrap around into a new row */
    /* flex-direction: column; */  /* have our elements stack vertically instead of horizontally */

    /* if you delete the top row, you'll notice the column of images are no longer aligned in the center despite our justify-content. This is because the justify-content's direction also flipped. It now controls the vertical alignment. */

    align-items: center; /* this is now what we want */
    /* flex-direction: row-reverse; */ /* can reverse the order! */
    flex-direction: row;
}

.photo-grid-item {
    border: 1px solid #fff;
    width: 300px;
    height: 300px;
}

/* we can also style the individual flex items */
/* the order property defaults to 0. Increasing moves item to the right. Decreasing it moves item to the left. */
.first-item {
    order: 1
}

.last-item {
    order: -1
}

.social,
.subscribe {
    align-self: flex-end; /* Overrides the align-item value in parent container */
    margin-bottom: 20px;
}

.footer {
    display: flex;
    justify-content: space-between;
}

/* notice how different values of flex cause the items to grow at different rates */

.footer-item {
    border: 1px solid #fff;
    background-color: #D6E9FE;
    height: 200px;
    flex: 1;
}
/* 
.footer-three {
    flex: 2;
}
*/

.footer-one,
.footer-three {
    background-color: #5995DA;
    flex: initial; /* Causes item to fall back to explicit width property AND also causes them not to resize when window is adjusted */
    width: 300px;
}

/* auto-margins in flexbox are special. They can be used as an alternative to an extra <div> when trying to align a group of items to the left or right of the container. Auto-margins act like dividers for flex items in the same container. */
.signup2 {
    margin-left: auto;
}